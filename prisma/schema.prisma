generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  firstName  String
  lastName   String
  email      String     @unique
  password   String
  role       UserRole   @default(ADMIN)
  status     UserStatus @default(ACTIVE)
  isVerified Boolean    @default(false)
}

model Category {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  productCategory ProductCategory[]
}

model Brand {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  product Product[]
}

model ProductCategory {
  productId    Int
  productSku   String
  categoryName String
  categoryId   Int
  category     Category @relation(fields: [categoryId], references: [id])
  product      Product  @relation(fields: [productId], references: [id])

  @@id([productId, categoryId])
}

model Product {
  id              Int               @id @default(autoincrement())
  sku             String            @unique
  name            String            @unique
  image           String?
  qtyThreshold    Int?
  brandId         Int
  brand           Brand             @relation(fields: [brandId], references: [id])
  bundleProduct   BundleProduct[]
  productCategory ProductCategory[]
  stockQuantity   StockQuantity[]
}

model Location {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  address       String
  stockQuantity StockQuantity[]
}

model StockQuantity {
  productId    Int
  productName  String
  productSku   String
  locationId   Int
  quantity     Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  locationName String
  location     Location @relation(fields: [locationId], references: [id])
  product      Product  @relation(fields: [productId], references: [id])

  @@id([productId, locationId])
}

model Bundle {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  description   String
  bundleProduct BundleProduct[]
}

model BundleProduct {
  bundleId    Int
  productId   Int
  productSku  String
  bundleName  String
  productName String
  bundle      Bundle  @relation(fields: [bundleId], references: [id])
  product     Product @relation(fields: [productId], references: [id])

  @@id([productId, bundleId])
}

model ProcurementOrder {
  id               Int                    @id @default(autoincrement())
  orderDate        DateTime
  description      String
  paymentStatus    PaymentStatus          @default(PENDING)
  fulfilmentStatus FulfilmentStatus       @default(CREATED)
  supplierId       Int
  totalAmount      Float
  warehouseAddress String
  supplierAddress  String
  supplierEmail    String
  supplierName     String
  warehouseName    String
  procOrderItems   ProcurementOrderItem[]
}

model ProcurementOrderItem {
  quantity    Int
  procOrderId Int
  id          Int              @id @default(autoincrement())
  productName String
  productSku  String
  rate        Float
  procOrder   ProcurementOrder @relation(fields: [procOrderId], references: [id])
}

model Supplier {
  id      Int    @id @default(autoincrement())
  email   String @unique
  name    String
  address String
}

model Keys {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String @unique
}

model SalesOrderItem {
  id           Int        @id @default(autoincrement())
  productName  String
  price        Float
  quantity     Int
  salesOrderId Int
  createdTime  DateTime
  salesOrder   SalesOrder @relation(fields: [salesOrderId], references: [id])
}

model SalesOrder {
  id                Int              @id @default(autoincrement())
  orderId           String           @unique
  customerAddress   String
  customerContactNo String
  customerEmail     String?
  currency          String
  customerName      String
  platformType      PlatformType
  postalCode        String
  amount            Float
  createdTime       DateTime
  customerRemarks   String?
  orderStatus       OrderStatus      @default(PAID)
  DeliveryOrder     DeliveryOrder?
  salesOrderItems   SalesOrderItem[]
}

model DeliveryOrder {
  id                 Int            @id @default(autoincrement())
  type               DeliveryType   @default(MANUAL)
  createdAt          DateTime       @default(now())
  deliveryDate       DateTime
  deliveryPersonnel  String?
  shippitTrackingNum String?
  method             DeliveryMode?  @default(STANDARD)
  carrier            String?
  status             DeliveryStatus @default(READY_FOR_DELIVERY)
  salesOrderId       Int            @unique
  SalesOrder         SalesOrder     @relation(fields: [salesOrderId], references: [id])
}

enum OrderStatus {
  CREATED
  PAID
  PREPARED
  SHIPPED
  COMPLETED
}

enum PlatformType {
  SHOPEE
  SHOPIFY
  LAZADA
  REDMART
  OTHERS
}

enum UserRole {
  ADMIN
  INTERN
  PARTTIME
  FULLTIME
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  DISABLED
}

enum PaymentStatus {
  PENDING
  PAID
}

enum FulfilmentStatus {
  CREATED
  ARRIVED
  COMPLETED
}

enum DeliveryMode {
  STANDARD
  EXPRESS
  PRIORITY
}

enum DeliveryStatus {
  READY_FOR_DELIVERY
  DELIVERY_IN_PROGRESS
  DELIVERED
  CANCELLED
}

enum DeliveryType {
  MANUAL
  SHIPPIT
}
